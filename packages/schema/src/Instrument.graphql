#import JSON from "./JSON.graphql"
#import Instrument from "lucuma-schemas/odb"

enum WfsType {
  NONE
  PWFS1
  PWFS2
  OIWFS
}

type InstrumentConfig {
  pk: Int! # Record primary key
  name: Instrument! # Instrument name
  iaa: Float! # Instrument Alignment Angle
  issPort: Int! # Instrument Support Structure port
  focusOffset: Float! # Focus offset
  wfs: WfsType! # Asociated Wavefront Sensor
  originX: Float! # Origin of instrument X position
  originY: Float! # Origin of instrument Y position
  ao: Boolean! # Adaptive Optics is being used?
  extraParams: JSON! # Instrument dependent set of parameters
}

type DistinctInstrument {
  name: String!
}

type DistinctPort {
  issPort: Int!
}

# The "Query" type is special: it lists all of the available queries that
# clients can execute, along with the return type for each. In this
# case, the "books" query returns an array of zero or more Books (defined above).
type Query {
  instrument(name: Instrument, issPort: Int, wfs: WfsType, extraParams: JSON): InstrumentConfig!

  instruments(name: Instrument, issPort: Int, wfs: WfsType, extraParams: JSON): [InstrumentConfig!]!

  distinctInstruments: [DistinctInstrument!]!

  distinctPorts(name: Instrument): [DistinctPort!]!
}

type Mutation {
  createInstrument(
    name: Instrument! # Instrument name
    iaa: Float # Instrument Alignment Angle
    issPort: Int! # Instrument Support Structure port
    focusOffset: Float # Focus offset
    wfs: WfsType # Asociated Wavefront Sensor
    originX: Float # Origin of instrument X position
    originY: Float # Origin of instrument Y position
    ao: Boolean # Adaptive Optics is being used?
    extraParams: JSON # Instrument dependent set of parameters
  ): InstrumentConfig!

  updateInstrument(
    pk: Int!
    name: Instrument
    iaa: Float
    issPort: Int
    focusOffset: Float
    wfs: WfsType
    originX: Float
    originY: Float
    ao: Boolean
    extraParams: JSON
  ): InstrumentConfig!

  # Reset the instruments to their default values
  resetInstruments(name: Instrument!): [InstrumentConfig!]!
}
